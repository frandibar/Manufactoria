(module dot racket
        (require (only-in "helpers.rkt" 
                          maplist
                          to-string))
        (provide graph->png)
        ;; (provide dot-name
        ;;          dot-label
        ;;          nodes->dot
        ;;          edges->dot
        ;;          undirected-edges->dot
        ;;          graph->dot
        ;;          dot->png
        ;;          graph->png)

;; replaces invalid dot chars in name with underscores
;; eg.: (dot-name 'living-room) => "living_room"
(define (dot-name name)
  (string-join (regexp-split #rx"[^0-9a-zA-Z]" (to-string name)) 
               "_"))

;; returns label if its len < max-label-length, else it crops label and adds ellipsis
;; eg.: (dot-label '(living-room (you are in the living room)) => "(living-room (you are in th..."
(define (dot-label label)
  (regexp-replace #px"(.{30}).+" label "\\1...")) ; 30 is the max-label-length

;; returns the dot representation of nodes as a string
(define (nodes->dot nodes [node-decorator null])
  (apply string-append
         (if (null? node-decorator)
             (map (lambda (node)
                    (let ([name (dot-name (car node))]
                          [label (dot-label node)])
                      (string-append name "[label=\"" label "\"];\n")))
                  nodes)
             (map node-decorator nodes))))

;; returns the dot representation of edges as a string
(define (edges->dot edges [edge-decorator null])
  (apply string-append
         (map (lambda (node)
                (apply string-append
                       (if (null? edge-decorator)
                           (map (lambda (edge)
                                  (let ([node-name (dot-name (car node))]
                                        [edge-name (dot-name (car edge))]
                                        [label (dot-label (cdr edge))])
                                    (string-append node-name "->" edge-name "[label=\"" label "\"];\n")))
                                (cdr node))
                           (map (lambda (edge) (edge-decorator (car node) (car edge))) (cdr node)))))
              edges)))

;; returns the dot representation of edges as a string
(define (undirected-edges->dot edges [edge-decorator null])
  (apply string-append
         (maplist (lambda (lst)
                    (apply string-append
                           (if (null? edge-decorator)
                               (map (lambda (edge)
                                      (if (assoc (car edge) (cdr lst))
                                          ""
                                          (let ([node-name (dot-name (caar lst))]
                                                [edge-name (dot-name (car edge))]
                                                [label (dot-label (cdr edge))])
                                            (string-append node-name "--" edge-name "[label=\"" label "\"];\n"))))
                                    (cdar lst))
                               (map (lambda (edge) (edge-decorator edge lst)) (cdar lst)))))
                  edges)))


;; returns the dot representation of a graph as a string
(define (graph->dot nodes edges directed [node-decorator null] [edge-decorator null])
  (let ([di (if directed "di" "")]
        [edges-fn (if directed edges->dot undirected-edges->dot)])
    (string-append di "graph {\n"
                   (nodes->dot nodes node-decorator)
                   (edges-fn edges edge-decorator)
                   "}\n")))

;; creates an image file of the dot graph generated by calling thunk
(define (dot->png output-file thunk)
  (let ((dot-file (regexp-replace #rx".png$" output-file ".dot")))
    (with-output-to-file dot-file (lambda () (printf (thunk))) #:exists 'replace)
    (system (string-append "dot -Tpng -o" output-file " " dot-file))))

;; creates an image file of the graph described by nodes and edges
(define (graph->png output-file nodes edges directed [node-decorator null] [edge-decorator null])
  (dot->png output-file 
            (lambda () (graph->dot nodes edges directed node-decorator edge-decorator))))

)   ; module

