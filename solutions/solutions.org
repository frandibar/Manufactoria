To play the game online, clic [[http://www.kongregate.com/games/PleasingFungus/manufactoria][here]].

#+STARTUP: content
* Levels [13/27]
#+COLUMNS: %TODO %20ITEM %10time %5parts
  :PROPERTIES:
  :image:    [[file:~/ingenio/manufactoria/manufactoria.png]]
  :END:
** DONE Robotoast!
   :PROPERTIES:
   :objective:   Move robots from the entrance (top) to the exit (bottom)
   :time:     546:04
   :parts:    5
   :solution: ?lvl=1&code=c12:6f3;c12:7f3;c12:8f3;
   :image:    [[file:robotoast.png]]
   :test:     '(b r b)
   :END:

The resulting machine in scheme looks like
#+begin_src scheme
  '(lambda (tape)
     (define (blue? color) (eq? color 'b))
     (define (red? color) (eq? color 'r))
     (define (green? color) (eq? color 'g))
     (define (yellow? color) (eq? color 'y))
     (define (next tape) (if (null? tape) null (car tape)))
     (define (tail tape) (if (null? tape) null (cdr tape)))
     (define (accept tape) (list 'accepted tape))
     (define (reject tape) (list 'rejected tape))
     (define (basket-12-9 tape) (accept tape))
     (basket-12-9 tape))
#+end_src

** DONE Robocoffee!
   :PROPERTIES:
   :objective: If a robot's string starts with blue, accept. Otherwise reject!
   :time:     614:18
   :parts:    5
   :solution: ?lvl=2&code=c13:7f3;c13:8f3;c13:9f0;p13:6f2;c12:6f2;
   :image:    [[file:robocoffee.png]]
   :test:     '((b r) (r b))
   :END:

#+begin_src scheme
  '(lambda (tape)
     (define (blue? color) (eq? color 'b))
     (define (red? color) (eq? color 'r))
     (define (green? color) (eq? color 'g))
     (define (yellow? color) (eq? color 'y))
     (define (next tape) (if (null? tape) null (car tape)))
     (define (tail tape) (if (null? tape) null (cdr tape)))
     (define (accept tape) (list 'accepted tape))
     (define (reject tape) (list 'rejected tape))
     (define (p-13-6 tape)
       (let ((color (next tape)) (tape-tail (tail tape)))
         (cond
          ((blue? color) (basket-12-9 tape-tail))
          ((red? color) (reject tape-tail))
          (else (reject tape-tail)))))
     (define (basket-12-9 tape) (accept tape))
     (p-13-6 tape))
#+end_src   

** DONE Robolamp!
   :PROPERTIES:
   :objective: ACCEPT: if there are three or more blues!
   :time:     3234:35
   :parts:    16
   :solution: ?lvl=3&code=c12:5f3;p12:6f3;c13:5f0;c13:6f1;c11:6f0;p10:7f3;c9:7f3;c10:6f3;c11:7f1;c9:9f2;c10:9f2;c9:8f3;c11:8f3;c11:9f2;c12:8f0;p12:9f2;
   :image:    [[file:robolamp.png]]
   :test:     '((r r r r r r r b b b) (r r r r r r r r b b))
   :END:

#+begin_src scheme
  '(lambda (tape)
     (define (blue? color) (eq? color 'b))
     (define (red? color) (eq? color 'r))
     (define (green? color) (eq? color 'g))
     (define (yellow? color) (eq? color 'y))
     (define (next tape) (if (null? tape) null (car tape)))
     (define (tail tape) (if (null? tape) null (cdr tape)))
     (define (accept tape) (list 'accepted tape))
     (define (reject tape) (list 'rejected tape))
     (define (p-12-6 tape)
       (let ((color (next tape)) (tape-tail (tail tape)))
         (cond
          ((blue? color) (p-10-7 tape-tail))
          ((red? color) (p-12-6 tape-tail))
          (else (reject tape-tail)))))
     (define (p-10-7 tape)
       (let ((color (next tape)) (tape-tail (tail tape)))
         (cond
          ((blue? color) (p-12-9 tape-tail))
          ((red? color) (p-10-7 tape-tail))
          (else (reject tape-tail)))))
     (define (p-12-9 tape)
       (let ((color (next tape)) (tape-tail (tail tape)))
         (cond
          ((blue? color) (accept tape-tail))
          ((red? color) (p-12-9 tape-tail))
          (else (reject tape-tail)))))
     (define (basket-12-10 tape) (accept tape))
     (p-12-6 tape))
#+end_src
   
** DONE Robofish!
   :PROPERTIES:
   :objective: ACCEPT: if a robot contains NO red!
   :time:     1091:16
   :parts:    5
   :solution: ?lvl=4&code=p12:8f3;c12:6f3;c12:7f3;c11:8f1;c11:7f2;
   :image:    [[file:robofish.png]]
   :test:     '((b b b b b b b b b b) (b b b b b b b b r b))
   :END:

#+begin_src scheme
  '(lambda (tape)
     (define (blue? color) (eq? color 'b))
     (define (red? color) (eq? color 'r))
     (define (green? color) (eq? color 'g))
     (define (yellow? color) (eq? color 'y))
     (define (next tape) (if (null? tape) null (car tape)))
     (define (tail tape) (if (null? tape) null (cdr tape)))
     (define (accept tape) (list 'accepted tape))
     (define (reject tape) (list 'rejected tape))
     (define (p-12-8 tape)
       (let ((color (next tape)) (tape-tail (tail tape)))
         (cond
          ((blue? color) (p-12-8 tape-tail))
          ((red? color) (reject tape-tail))
          (else (accept tape)))))
     (define (basket-12-9 tape) (accept tape))
     (p-12-8 tape))
#+end_src   
** DONE RC Cars!
   :PROPERTIES:
   :objective: OUTPUT: The input, but with the first symbol at the end!
   :time:     819:04
   :parts:    7
   :solution: ?lvl=8&code=c12:8f3;c12:7f3;p12:6f3;c11:7f2;c13:7f0;b11:6f3;r13:6f3;
   :image:    [[file:rccars.png]]
   :test:     '(b r b r b b b r b)
   :END:

#+begin_src scheme
  '(lambda (tape)
     (define (blue? color) (eq? color 'b))
     (define (red? color) (eq? color 'r))
     (define (green? color) (eq? color 'g))
     (define (yellow? color) (eq? color 'y))
     (define (next tape) (if (null? tape) null (car tape)))
     (define (tail tape) (if (null? tape) null (cdr tape)))
     (define (accept tape) (list 'accepted tape))
     (define (reject tape) (list 'rejected tape))
     (define (p-12-6 tape)
       (let ((color (next tape)) (tape-tail (tail tape)))
         (cond
          ((blue? color) (b-11-6 tape-tail))
          ((red? color) (r-13-6 tape-tail))
          (else (basket-12-9 tape)))))
     (define (b-11-6 tape) (basket-12-9 (append tape (list 'b))))
     (define (r-13-6 tape) (basket-12-9 (append tape (list 'r))))
     (define (basket-12-9 tape) (accept tape))
     (p-12-6 tape))
#+end_src
   
** DONE Robobugs!
   :PROPERTIES:
   :objective: ACCEPT: if the tape has only alternating colors!
   :time:     958:14
   :parts:    25
   :solution: ?lvl=5&code=c12:4f3;c12:8f3;c12:9f3;c12:10f3;p12:6f3;c12:7f3;c12:5f3;c11:6f0;p10:6f0;p10:7f0;c9:6f3;c9:7f3;c9:8f3;c9:9f2;c10:9f2;c11:9f2;c13:6f2;p14:6f2;p14:7f2;c15:6f3;c15:7f3;c15:8f3;c15:9f0;c14:9f0;c13:9f0;
   :image:    [[file:robobugs.png]]
   :test:     '((b r b r b r b r b r b r) (b r b r b r b r b b r r))
   :END:

#+begin_src scheme
  '(lambda (tape)
     (define (blue? color) (eq? color 'b))
     (define (red? color) (eq? color 'r))
     (define (green? color) (eq? color 'g))
     (define (yellow? color) (eq? color 'y))
     (define (next tape) (if (null? tape) null (car tape)))
     (define (tail tape) (if (null? tape) null (cdr tape)))
     (define (accept tape) (list 'accepted tape))
     (define (reject tape) (list 'rejected tape))
     (define (p-12-6 tape)
       (let ((color (next tape)) (tape-tail (tail tape)))
         (cond
          ((blue? color) (p-10-6 tape-tail))
          ((red? color) (p-14-6 tape-tail))
          (else (basket-12-11 tape)))))
     (define (p-10-6 tape)
       (let ((color (next tape)) (tape-tail (tail tape)))
         (cond
          ((blue? color) (reject tape-tail))
          ((red? color) (p-10-7 tape-tail))
          (else (basket-12-11 tape)))))
     (define (p-10-7 tape)
       (let ((color (next tape)) (tape-tail (tail tape)))
         (cond
          ((blue? color) (p-10-6 tape-tail))
          ((red? color) (reject tape-tail))
          (else (basket-12-11 tape)))))
     (define (p-14-6 tape)
       (let ((color (next tape)) (tape-tail (tail tape)))
         (cond
          ((blue? color) (p-14-7 tape-tail))
          ((red? color) (reject tape-tail))
          (else (basket-12-11 tape)))))
     (define (p-14-7 tape)
       (let ((color (next tape)) (tape-tail (tail tape)))
         (cond
          ((blue? color) (reject tape-tail))
          ((red? color) (p-14-6 tape-tail))
          (else (basket-12-11 tape)))))
     (define (basket-12-11 tape) (accept tape))
     (p-12-6 tape))
#+end_src

** DONE Robocars!
   :PROPERTIES:
   :objective: OUTPUT: Replace blue with green, and red with yellow!
   :time:     12834:18
   :parts:    17
   :solution: ?lvl=9&code=g11:6f3;p12:6f3;y13:6f3;c12:7f3;c12:8f3;c12:9f3;c10:6f1;c14:6f1;c14:5f0;c13:5f0;c10:5f2;c11:5f2;c12:5f3;c11:7f0;c10:7f1;c14:7f1;c13:7f2;
   :image:    [[file:robocars.png]]
   :test:     '(r b r b r r r b)
   :END:

#+begin_src scheme
  '(lambda (tape)
     (define (blue? color) (eq? color 'b))
     (define (red? color) (eq? color 'r))
     (define (green? color) (eq? color 'g))
     (define (yellow? color) (eq? color 'y))
     (define (next tape) (if (null? tape) null (car tape)))
     (define (tail tape) (if (null? tape) null (cdr tape)))
     (define (accept tape) (list 'accepted tape))
     (define (reject tape) (list 'rejected tape))
     (define (p-12-6 tape)
       (let ((color (next tape)) (tape-tail (tail tape)))
         (cond
          ((blue? color) (g-11-6 tape-tail))
          ((red? color) (y-13-6 tape-tail))
          (else (basket-12-10 tape)))))
     (define (g-11-6 tape) (p-12-6 (append tape (list 'g))))
     (define (y-13-6 tape) (p-12-6 (append tape (list 'y))))
     (define (basket-12-10 tape) (accept tape))
     (p-12-6 tape))
#+end_src
   
** DONE Robocats!
   :PROPERTIES:
   :objective: ACCEPT: if the tape ends with two blues!
   :time:     7714:18
   :parts:    23
   :solution: ?lvl=6&code=c10:10f3;c10:11f2;c11:11f2;c11:5f3;c12:4f3;p12:5f3;c13:4f0;c13:5f1;c13:6f1;c11:6f3;p11:7f3;c12:7f2;c9:7f2;c13:7f1;c9:9f1;p10:9f3;c9:8f1;c10:8f3;c11:9f2;c12:9f2;c13:8f1;c13:9f1;c10:7f3;
   :image:    [[file:robocats.png]]
   :test:     '((b r b r r b r r b) (b r b r b r r b b))
   :END:

#+begin_src scheme
  '(lambda (tape)
     (define (blue? color) (eq? color 'b))
     (define (red? color) (eq? color 'r))
     (define (green? color) (eq? color 'g))
     (define (yellow? color) (eq? color 'y))
     (define (next tape) (if (null? tape) null (car tape)))
     (define (tail tape) (if (null? tape) null (cdr tape)))
     (define (accept tape) (list 'accepted tape))
     (define (reject tape) (list 'rejected tape))
     (define (p-12-5 tape)
       (let ((color (next tape)) (tape-tail (tail tape)))
         (cond
          ((blue? color) (p-11-7 tape-tail))
          ((red? color) (p-12-5 tape-tail))
          (else (reject tape-tail)))))
     (define (p-11-7 tape)
       (let ((color (next tape)) (tape-tail (tail tape)))
         (cond
          ((blue? color) (p-10-9 tape-tail))
          ((red? color) (p-12-5 tape-tail))
          (else (reject tape-tail)))))
     (define (p-10-9 tape)
       (let ((color (next tape)) (tape-tail (tail tape)))
         (cond
          ((blue? color) (p-10-9 tape-tail))
          ((red? color) (p-12-5 tape-tail))
          (else (basket-12-11 tape)))))
     (define (basket-12-11 tape) (accept tape))
     (p-12-5 tape))
#+end_src
   
** DONE Robostilts!
   :PROPERTIES:
   :objective: OUTPUT: Put a green at the beginning, and a yellow at the end!
   :time:     1570:06
   :parts:    12
   :solution: ?lvl=10&code=g12:4f2;p12:6f3;b11:6f1;r13:6f1;c11:5f2;c13:5f0;c12:5f3;y12:7f3;c12:8f3;c12:9f3;c12:10f3;c13:4f3;
   :image:    [[file:robostilts.png]]
   :test:     '(r r b r b r b b r)
   :END:
   
#+begin_src scheme
  '(lambda (tape)
     (define (blue? color) (eq? color 'b))
     (define (red? color) (eq? color 'r))
     (define (green? color) (eq? color 'g))
     (define (yellow? color) (eq? color 'y))
     (define (next tape) (if (null? tape) null (car tape)))
     (define (tail tape) (if (null? tape) null (cdr tape)))
     (define (accept tape) (list 'accepted tape))
     (define (reject tape) (list 'rejected tape))
     (define (p-12-6 tape)
       (let ((color (next tape)) (tape-tail (tail tape)))
         (cond
          ((blue? color) (b-11-6 tape-tail))
          ((red? color) (r-13-6 tape-tail))
          (else (y-12-7 tape)))))
     (define (g-12-4 tape) (p-12-6 (append tape (list 'g))))
     (define (b-11-6 tape) (p-12-6 (append tape (list 'b))))
     (define (r-13-6 tape) (p-12-6 (append tape (list 'r))))
     (define (y-12-7 tape) (basket-12-11 (append tape (list 'y))))
     (define (basket-12-11 tape) (accept tape))
     (g-12-4 tape))
#+end_src

** DONE Robobears!
   :PROPERTIES:
   :objective: ACCEPT: Strings that begin and end with the same color!
   :time:     9079:44
   :parts:    47
   :solution: ?lvl=7&code=p12:4f3;c12:10f3;c11:4f0;c13:4f2;c12:5f3;c12:6f3;c12:7f3;c12:8f3;c12:9f3;c10:4f0;c8:4f3;c8:5f3;c9:4f0;c11:7f1;c11:5f1;c16:4f3;c16:5f3;c14:4f2;c15:4f2;c13:7f1;c13:5f1;c8:6f3;c8:7f3;c8:8f2;c9:6f3;c9:7f2;c9:8f2;c9:9f1;p10:6f1;c10:7f1;p10:8f2;c10:9f0;c11:6f1;c11:8f2;c13:6f1;c13:8f0;p14:6f1;c14:7f1;p14:8f0;c14:9f2;c15:6f3;c15:7f0;c15:8f0;c15:9f1;c16:6f3;c16:7f3;c16:8f0;
   :image:    [[file:robobears.png]]
   :test:     '((b r b r r r b r r r b r b) (b r b r r r b r r r b b r))
   :END:
    
#+begin_src scheme
  '(lambda (tape)
     (define (blue? color) (eq? color 'b))
     (define (red? color) (eq? color 'r))
     (define (green? color) (eq? color 'g))
     (define (yellow? color) (eq? color 'y))
     (define (next tape) (if (null? tape) null (car tape)))
     (define (tail tape) (if (null? tape) null (cdr tape)))
     (define (accept tape) (list 'accepted tape))
     (define (reject tape) (list 'rejected tape))
     (define (p-12-4 tape)
       (let ((color (next tape)) (tape-tail (tail tape)))
         (cond
          ((blue? color) (p-10-8 tape-tail))
          ((red? color) (p-14-8 tape-tail))
          (else (basket-12-11 tape)))))
     (define (p-10-6 tape)
       (let ((color (next tape)) (tape-tail (tail tape)))
         (cond
          ((blue? color) (p-10-8 tape-tail))
          ((red? color) (p-10-6 tape-tail))
          (else (reject tape-tail)))))
     (define (p-10-8 tape)
       (let ((color (next tape)) (tape-tail (tail tape)))
         (cond
          ((blue? color) (p-10-8 tape-tail))
          ((red? color) (p-10-6 tape-tail))
          (else (basket-12-11 tape)))))
     (define (p-14-6 tape)
       (let ((color (next tape)) (tape-tail (tail tape)))
         (cond
          ((blue? color) (p-14-6 tape-tail))
          ((red? color) (p-14-8 tape-tail))
          (else (reject tape-tail)))))
     (define (p-14-8 tape)
       (let ((color (next tape)) (tape-tail (tail tape)))
         (cond
          ((blue? color) (p-14-6 tape-tail))
          ((red? color) (p-14-8 tape-tail))
          (else (basket-12-11 tape)))))
     (define (basket-12-11 tape) (accept tape))
     (p-12-4 tape))
#+end_src

** DONE Milidogs!
   :PROPERTIES:
   :objective: ACCEPT: With blue as 1 and red as 0, accept odd binary strings!
   :time:     10581:21
   :parts:    24
   :solution: ?lvl=11&code=p11:8f2;c12:8f3;c12:9f3;c10:5f3;c10:6f3;c10:7f3;c12:5f0;c11:5f0;c10:9f1;c10:8f2;c11:9f0;c11:7f2;c12:7f2;p13:7f2;c13:8f2;c14:5f0;c13:5f0;c15:6f1;c15:7f1;c15:8f1;c14:8f2;c15:5f0;c13:6f0;c12:6f3;
   :image:    [[file:milidogs.png]]
   :test:     '((b r r r r b r b) (b r r r r b b r))
   :END:

#+begin_src scheme
  '(lambda (tape)
     (define (blue? color) (eq? color 'b))
     (define (red? color) (eq? color 'r))
     (define (green? color) (eq? color 'g))
     (define (yellow? color) (eq? color 'y))
     (define (next tape) (if (null? tape) null (car tape)))
     (define (tail tape) (if (null? tape) null (cdr tape)))
     (define (accept tape) (list 'accepted tape))
     (define (reject tape) (list 'rejected tape))
     (define (p-12-4 tape)
       (let ((color (next tape)) (tape-tail (tail tape)))
         (cond
          ((blue? color) (p-10-8 tape-tail))
          ((red? color) (p-14-8 tape-tail))
          (else (basket-12-11 tape)))))
     (define (p-10-6 tape)
       (let ((color (next tape)) (tape-tail (tail tape)))
         (cond
          ((blue? color) (p-10-8 tape-tail))
          ((red? color) (p-10-6 tape-tail))
          (else (reject tape-tail)))))
     (define (p-10-8 tape)
       (let ((color (next tape)) (tape-tail (tail tape)))
         (cond
          ((blue? color) (p-10-8 tape-tail))
          ((red? color) (p-10-6 tape-tail))
          (else (basket-12-11 tape)))))
     (define (p-14-6 tape)
       (let ((color (next tape)) (tape-tail (tail tape)))
         (cond
          ((blue? color) (p-14-6 tape-tail))
          ((red? color) (p-14-8 tape-tail))
          (else (reject tape-tail)))))
     (define (p-14-8 tape)
       (let ((color (next tape)) (tape-tail (tail tape)))
         (cond
          ((blue? color) (p-14-6 tape-tail))
          ((red? color) (p-14-8 tape-tail))
          (else (basket-12-11 tape)))))
     (define (basket-12-11 tape) (accept tape))
     (p-12-4 tape))
#+end_src

** TODO Androids!:
   :objective: ACCEPT: Some number of blue, then the same number of red!
   :time:     -
   :parts:    -
   :solution: -
   :image:    [[file:androids.png]]
   :test:     '()
   :END:
   Should I accept 0 blues?

** DONE Roborockets!
   :PROPERTIES:
   :objective: OUTPUT: Swap blue for red, and red for blue!
   :time:     12834:18
   :parts:    13
   :solution: ?lvl=25&code=c12:5f3;c12:9f3;p12:6f3;g11:6f1;c11:5f2;y13:6f1;c13:5f0;c12:7f3;q12:8f3;c13:7f0;c11:7f2;r13:8f1;b11:8f1;
   :image:    [[file:roborockets.png]]
   :test:     '(b b r b r r)
   :END:

#+begin_src scheme
  '(lambda (tape)
     (define (blue? color) (eq? color 'b))
     (define (red? color) (eq? color 'r))
     (define (green? color) (eq? color 'g))
     (define (yellow? color) (eq? color 'y))
     (define (next tape) (if (null? tape) null (car tape)))
     (define (tail tape) (if (null? tape) null (cdr tape)))
     (define (accept tape) (list 'accepted tape))
     (define (reject tape) (list 'rejected tape))
     (define (p-12-6 tape)
       (let ((color (next tape)) (tape-tail (tail tape)))
         (cond
          ((blue? color) (g-11-6 tape-tail))
          ((red? color) (y-13-6 tape-tail))
          (else (q-12-8 tape)))))
     (define (q-12-8 tape)
       (let ((color (next tape)) (tape-tail (tail tape)))
         (cond
          ((green? color) (r-13-8 tape-tail))
          ((yellow? color) (b-11-8 tape-tail))
          (else (basket-12-10 tape)))))
     (define (g-11-6 tape) (p-12-6 (append tape (list 'g))))
     (define (y-13-6 tape) (p-12-6 (append tape (list 'y))))
     (define (r-13-8 tape) (q-12-8 (append tape (list 'r))))
     (define (b-11-8 tape) (q-12-8 (append tape (list 'b))))
     (define (basket-12-10 tape) (accept tape))
     (p-12-6 tape))
#+end_src

** DONE Roboplanes!
   :PROPERTIES:
   :objective: OUTPUT: All of the blue, but none of the red!
   :time:     921:42
   :parts:    11
   :solution: ?lvl=26&code=p12:6f3;g11:6f1;c13:5f0;c12:5f3;c13:6f1;c11:5f2;q12:8f3;c12:7f3;b13:8f1;c13:7f0;c12:9f3;
   :image:    [[file:roboplanes.png]]
   :test:     '(r r b r r b b b r)
   :END:

#+begin_src scheme
  '(lambda (tape)
     (define (blue? color) (eq? color 'b))
     (define (red? color) (eq? color 'r))
     (define (green? color) (eq? color 'g))
     (define (yellow? color) (eq? color 'y))
     (define (next tape) (if (null? tape) null (car tape)))
     (define (tail tape) (if (null? tape) null (cdr tape)))
     (define (accept tape) (list 'accepted tape))
     (define (reject tape) (list 'rejected tape))
     (define (p-12-6 tape)
       (let ((color (next tape)) (tape-tail (tail tape)))
         (cond
          ((blue? color) (g-11-6 tape-tail))
          ((red? color) (p-12-6 tape-tail))
          (else (q-12-8 tape)))))
     (define (q-12-8 tape)
       (let ((color (next tape)) (tape-tail (tail tape)))
         (cond
          ((green? color) (b-13-8 tape-tail))
          ((yellow? color) (reject tape-tail))
          (else (basket-12-10 tape)))))
     (define (g-11-6 tape) (p-12-6 (append tape (list 'g))))
     (define (b-13-8 tape) (q-12-8 (append tape (list 'b))))
     (define (basket-12-10 tape) (accept tape))
     (p-12-6 tape))
#+end_src

** TODO Robomecha!
   :PROPERTIES:
   :objective: OUTPUT: The input, but with the last symbol moved to the front!
   :time:     -
   :parts:    -
   :solution: -
   :image:    [[file:robomecha.png]]
   :test:     '()
   :END:

** TODO Unknown
   :PROPERTIES:
   :objective: -
   :time:     -
   :parts:    -
   :solution: -
   :image:    [[file:x.png]]
   :test:     -
   :END:

** TODO Robotanks!
   :PROPERTIES:
   :objective: ACCEPT: With blue as 1 and red as 0, accept binary strings > 15!
   :time:     -
   :parts:    -
   :solution: -
   :image:    [[file:x.png]]
   :test:     '(b b b b b)
   :END:

** TODO Unknown
   :PROPERTIES:
   :objective: -
   :time:     -
   :parts:    -
   :solution: -
   :image:    [[file:x.png]]
   :test:     -
   :END:

** TODO Unknown
   :PROPERTIES:
   :objective: -
   :time:     -
   :parts:    -
   :solution: -
   :image:    [[file:x.png]]
   :test:     -
   :END:

** TODO Rocket Planes!
   :PROPERTIES:
   :objective: OUTPUT: The input, but with all blues moved to the front!
   :time:     -
   :parts:    -
   :solution: -
   :image:    [[file:x.png]]
   :test:     '()
   :END:

** TODO Unknown
   :PROPERTIES:
   :objective: -
   :time:     -
   :parts:    -
   :solution: -
   :image:    [[file:x.png]]
   :test:     -
   :END:

** TODO Unknown
   :PROPERTIES:
   :objective: -
   :time:     -
   :parts:    -
   :solution: -
   :image:    [[file:x.png]]
   :test:     -
   :END:

** TODO Unknown
   :PROPERTIES:
   :objective: -
   :time:     -
   :parts:    -
   :solution: -
   :image:    [[file:x.png]]
   :test:     -
   :END:

** TODO Unknown
   :PROPERTIES:
   :objective: -
   :time:     -
   :parts:    -
   :solution: -
   :image:    [[file:x.png]]
   :test:     -
   :END:

** TODO Unknown
   :PROPERTIES:
   :objective: -
   :time:     -
   :parts:    -
   :solution: -
   :image:    [[file:x.png]]
   :test:     -
   :END:

** TODO Unknown
   :PROPERTIES:
   :objective: -
   :time:     -
   :parts:    -
   :solution: -
   :image:    [[file:x.png]]
   :test:     -
   :END:

** TODO Unknown
   :PROPERTIES:
   :objective: -
   :time:     -
   :parts:    -
   :solution: -
   :image:    [[file:x.png]]
   :test:     -
   :END:
