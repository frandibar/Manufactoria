To play the game online, clic [[http://www.kongregate.com/games/PleasingFungus/manufactoria][here]].

#+STARTUP: content
* Levels [16/22]
#+COLUMNS: %TODO %20ITEM %10time %5parts
  :PROPERTIES:
  :image:    [[file:manufactoria.png]]
  :END:
** DONE Robotoast!
   :PROPERTIES:
   :objective:   Move robots from the entrance (top) to the exit (bottom)
   :time:     546:04
   :parts:    3
   :solution: ?lvl=1&code=c12:6f3;c12:7f3;c12:8f3;
   :image:    [[file:robotoast.png]]
   :test:     '(b r b)
   :END:

   The resulting machine in scheme looks like
#+begin_src scheme
  '(lambda (tape)
     (define (blue? color) (eq? color 'b))
     (define (red? color) (eq? color 'r))
     (define (green? color) (eq? color 'g))
     (define (yellow? color) (eq? color 'y))
     (define (next tape) (if (null? tape) null (car tape)))
     (define (tail tape) (if (null? tape) null (cdr tape)))
     (define (accept tape) (list 'accepted tape))
     (define (reject tape) (list 'rejected tape))
     (define (basket-12-9 tape) (accept tape))
     (basket-12-9 tape))
#+end_src

** DONE Robocoffee!
   :PROPERTIES:
   :objective: If a robot's string starts with blue, accept. Otherwise reject!
   :time:     409:32
   :parts:    3
   :solution: ?lvl=2&code=p12:6f2;c12:7f3;c12:8f3;
   :image:    [[file:robocoffee.png]]
   :test:     '((b r) (r b))
   :END:

** DONE Robolamp!
   :PROPERTIES:
   :objective: ACCEPT: if there are three or more blues!
   :time:     1873:06
   :parts:    9
   :solution: ?lvl=3&code=c11:9f2;p12:9f2;p12:5f3;c13:5f0;c12:8f3;p11:5f4;c11:4f3;c11:6f3;c11:7f3;c11:8f3;
   :image:    [[file:robolamp.png]]
   :test:     '((r r r r r r r b b b) (r r r r r r r r b b))
   :END:

** DONE Robofish!
   :PROPERTIES:
   :objective: ACCEPT: if a robot contains NO red!
   :time:     546:04
   :parts:    4
   :solution: ?lvl=4&code=c11:6f2;p12:6f3;c12:7f3;c12:8f3;
   :image:    [[file:robofish.png]]
   :test:     '((b b b b b b b b b b) (b b b b b b b b r b))
   :END:

** DONE Robobugs!
   :PROPERTIES:
   :objective: ACCEPT: if the tape has only alternating colors!
   :time:     686:02
   :parts:    21
   :solution: ?lvl=5&code=c12:4f3;c12:8f3;c12:9f3;c12:10f3;p12:6f3;c12:7f3;c12:5f3;c10:6f3;c10:7f3;c10:8f3;c10:9f2;p11:6f0;p11:7f0;c11:9f2;p13:6f2;p13:7f2;c13:9f0;c14:6f3;c14:7f3;c14:8f3;c14:9f0;
   :image:    [[file:robobugs.png]]
   :test:     '((b r b r b r b r b r b r) (b r b r b r b r b b r r))
   :END:

** DONE Robocats!
   :PROPERTIES:
   :objective: ACCEPT: if the tape ends with two blues!
   :time:     5597:56
   :parts:    17
   :solution: ?lvl=6&code=c11:5f3;c12:4f3;p12:5f3;c13:6f1;c11:6f3;p11:7f3;c12:7f2;c13:7f1;c10:8f3;c13:8f1;c13:9f1;c10:7f3;c13:5f0;c10:9f2;p12:9f3;c11:9f2;c12:10f3;
   :image:    [[file:robocats.png]]
   :test:     '((b r b r r b r r b) (b r b r b r r b b))
   :END:

** DONE Robobears!
   :PROPERTIES:
   :objective: ACCEPT: Strings that begin and end with the same color!
   :time:     3140:22
   :parts:    23
   :solution: ?lvl=7&code=c12:4f3;p12:5f3;c12:6f3;c12:7f3;c12:8f3;c12:9f3;c12:10f3;c10:5f3;c10:6f3;c10:7f2;c11:3f3;p11:4f4;p11:5f4;c11:6f1;c11:7f2;c13:3f3;p13:4f6;p13:5f6;c13:6f1;c13:7f0;c14:5f3;c14:6f3;c14:7f0;
   :image:    [[file:robobears.png]]
   :test:     '((b r b r r r b r r r b r b) (b r b r r r b r r r b b r))
   :END:

   A string with length 1 is accepted.

** DONE RC Cars!
   :PROPERTIES:
   :objective: OUTPUT: The input, but with the first symbol at the end!
   :time:     819:04
   :parts:    7
   :solution: ?lvl=8&code=c12:8f3;c12:7f3;p12:6f3;c11:7f2;c13:7f0;b11:6f3;r13:6f3;
   :image:    [[file:rccars.png]]
   :test:     '(b r b r b b b r b)
   :END:

** DONE Robocars!
   :PROPERTIES:
   :objective: OUTPUT: Replace blue with green, and red with yellow!
   :time:     3822:54
   :parts:    7
   :solution: ?lvl=9&code=p12:6f3;c12:7f3;c12:8f3;c12:9f3;c12:5f3;g11:6f2;y13:6f0;
   :image:    [[file:robocars.png]]
   :test:     '(r b r b r r r b)
   :END:

** DONE Robostilts!
   :PROPERTIES:
   :objective: OUTPUT: Put a green at the beginning, and a yellow at the end!
   :time:     887:24
   :parts:    9
   :solution: ?lvl=10&code=p12:6f3;c12:5f3;y12:7f3;c12:8f3;c12:9f3;c12:10f3;b11:6f2;r13:6f0;g12:4f3;
   :image:    [[file:robostilts.png]]
   :test:     '(r r b r b r b b r)
   :END:
   
** DONE Milidogs!
   :PROPERTIES:
   :objective: ACCEPT: With blue as 1 and red as 0, accept odd binary strings!
   :time:     3549:48
   :parts:    9
   :solution: ?lvl=11&code=p12:6f3;c11:6f2;c12:7f3;c12:8f3;c12:9f3;c12:5f3;p13:6f6;c13:7f1;c13:5f0;
   :image:    [[file:milidogs.png]]
   :test:     '((b r r r r b r b) (b r r r r b b r))
   :END:

** DONE Androids!
   :PROPERTIES:
   :objective: ACCEPT: Some number of blue, then the same number of red!
   :time:     1511:07
   :parts:    44
   :solution: ?lvl=17&code=c8:5f1;c11:4f2;c13:7f3;c12:4f3;c13:4f0;c8:7f1;c8:8f1;c8:9f1;c8:10f1;b9:9f3;q9:10f4;r9:11f1;c10:10f0;c8:6f1;c12:7f2;c13:6f2;g11:5f2;p11:6f0;p12:6f3;c11:9f3;c8:4f2;c9:4f2;c10:4f2;c14:4f0;q15:4f4;b15:3f3;r15:5f1;c16:4f0;c16:5f1;p16:6f1;y16:7f1;p15:7f3;c13:11f0;c13:9f3;c15:6f3;c14:6f2;c12:5f3;y10:7f2;c11:7f3;p11:8f7;p10:8f4;c11:10f0;c13:10f3;q13:8f7;
   :image:    [[file:androids.png]]
   :test:     '((b b b b r r r r) (b b b b r r r))
   :END:
   Method: replace 2 blues with 1 green, discard pair "blue then red" in the transition, and replace the following 2 reds to 1 yellow.
   The solution has lots of redundancy to avoid cross sections.

** TODO Robomecha!
   :PROPERTIES:
   :objective: OUTPUT: The input, but with the last symbol moved to the front!
   :time:     -
   :parts:    -
   :solution: -
   :image:    [[file:robomecha.png]]
   :test:     '()
   :END:
   
   I have 2 ideas for this one:
   1. Send the 1st symbol to the back n times, with n the length of the input. The problem with this approach is that I don't know the value of n, thus when to stop.
   2. Have a termination flag, and remember the previous symbol upon reading. See the example [[file:~/projects/manufactoria/code-to-hardware.rkt::define%20robomecha][here]]. The problem is that this doesn't have a planar representation.

** TODO Soldiers!
   :PROPERTIES:
   :objective: OUTPUT: With blue as 1 and red as 0, multiply by 8!
   :time:     -
   :parts:    -
   :solution: -
   :image:    [[file:soldiers.png]]
   :test:     -
   :END:

** DONE Robotanks!
   :PROPERTIES:
   :objective: ACCEPT: With blue as 1 and red as 0, accept binary strings > 15!
   :time:     360:32
   :parts:    30
   :solution: ?lvl=15&code=p12:3f3;c13:3f0;p12:10f2;c12:9f2;c12:11f3;p11:3f0;c11:2f0;c9:5f3;c10:4f3;p10:5f3;c11:4f0;c11:5f3;c9:7f2;c9:8f3;c10:7f3;p10:8f3;c11:7f0;c9:6f3;c11:6f3;c9:9f3;c9:10f2;c10:10f2;c11:10f2;c11:8f3;c11:9f3;c10:2f3;i10:3f1;c13:9f3;i13:10f5;c13:11f0;
   :image:    [[file:robotanks.png]]
   :test:     '((r r r r r b b b b) (r r r r b b b b r))
   :END:

** TODO Robo-children!
   :PROPERTIES:
   :objective: ACCEPT: An equal number of blue and red, in any order!
   :time:     -
   :parts:    -
   :solution: -
   :image:    [[file:robochildren.png]]
   :test:     -
   :END:

** TODO Police!
   :PROPERTIES:
   :objective: OUTPUT: Put a yellow in the middle of the (even-length) string!
   :time:     -
   :parts:    -
   :solution: -
   :image:    [[file:police.png]]
   :test:     -
   :END:
** TODO Teachers!
   :PROPERTIES:
   :objective: ACCEPT: X blue, then X red, then X more blue, for any X!
   :time:     -
   :parts:    -
   :solution: -
   :image:    [[file:teachers.png]]
   :test:     -
   :END:

** DONE Rocket Planes!
   :PROPERTIES:
   :objective: OUTPUT: The input, but with all blues moved to the front!
   :time:     1607:32
   :parts:    27
   :solution: ?lvl=27&code=c11:11f2;c13:4f0;c14:4f0;g12:4f0;p11:4f0;b11:3f3;q9:4f0;c9:5f3;c10:4f0;c10:11f2;c10:10f3;r10:5f2;p11:5f7;r11:6f3;c10:9f3;c9:6f3;c10:8f3;b12:5f3;p12:6f6;r12:7f1;r13:6f2;c14:5f1;q14:6f2;q11:8f7;c11:7f3;c9:8f2;c9:7f3;
   :image:    [[file:rocketplanes.png]]
   :test:     '(r b r b r b r r b r)
   :END:

   The solution involves having a green end flag, and for each red we encounter, we send it to the end and start over again.

** Unknown
   :PROPERTIES:
   :objective: -
   :time:     -
   :parts:    -
   :solution: -
   :image:    [[file:x.png]]
   :test:     -
   :END:

** TODO Robospies!
   :PROPERTIES:
   :objective: ACCEPT: With blue as 1 and red as 0, accept natural powers of four.
   :time:     -
   :parts:    -
   :solution: -
   :image:    [[file:robospies.png]]
   :test:     -
   :END:

** Unknown
   :PROPERTIES:
   :objective: -
   :time:     -
   :parts:    -
   :solution: -
   :image:    [[file:x.png]]
   :test:     -
   :END:

** Unknown
   :PROPERTIES:
   :objective: -
   :time:     -
   :parts:    -
   :solution: -
   :image:    [[file:x.png]]
   :test:     -
   :END:

** Unknown
   :PROPERTIES:
   :objective: -
   :time:     -
   :parts:    -
   :solution: -
   :image:    [[file:x.png]]
   :test:     -
   :END:

** DONE Roborockets!
   :PROPERTIES:
   :objective: OUTPUT: Swap blue for red, and red for blue!
   :time:     6826:42
   :parts:    9
   :solution: ?lvl=25&code=c12:5f3;c12:9f3;p12:6f3;c12:7f3;q12:8f3;g11:6f2;y13:6f0;b11:8f2;r13:8f0;
   :image:    [[file:roborockets.png]]
   :test:     '(b b r b r r)
   :END:

** DONE Roboplanes!
   :PROPERTIES:
   :objective: OUTPUT: All of the blue, but none of the red!
   :time:     512:00
   :parts:    8
   :solution: ?lvl=26&code=p12:6f3;c12:5f3;q12:8f3;c12:7f3;c12:9f3;g11:6f2;c13:6f0;b13:8f0;
   :image:    [[file:roboplanes.png]]
   :test:     '(r r b r r b b b r)
   :END:

** Unknown
   :PROPERTIES:
   :objective: -
   :time:     -
   :parts:    -
   :solution: -
   :image:    [[file:x.png]]
   :test:     -
   :END:
