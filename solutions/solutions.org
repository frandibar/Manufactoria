To play the game online, clic [[http://www.kongregate.com/games/PleasingFungus/manufactoria][here]].

#+STARTUP: content
* Levels [23/26]
#+COLUMNS: %TODO %20ITEM %10time %5parts
  :PROPERTIES:
  :image:    [[file:manufactoria.png]]
  :END:
** DONE Robotoast!
   :PROPERTIES:
   :objective:   Move robots from the entrance (top) to the exit (bottom)
   :time:     546:04
   :parts:    3
   :solution: ?lvl=1&code=c12:6f3;c12:7f3;c12:8f3;
   :image:    [[file:robotoast.png]]
   :test:     '(b r b)
   :END:

   The resulting machine in scheme looks like
#+begin_src scheme
  '(lambda (tape)
     (define (blue? color) (eq? color 'b))
     (define (red? color) (eq? color 'r))
     (define (green? color) (eq? color 'g))
     (define (yellow? color) (eq? color 'y))
     (define (next tape) (if (null? tape) null (car tape)))
     (define (tail tape) (if (null? tape) null (cdr tape)))
     (define (accept tape) (list 'accepted tape))
     (define (reject tape) (list 'rejected tape))
     (define (basket-12-9 tape) (accept tape))
     (basket-12-9 tape))
#+end_src

** DONE Robocoffee!
   :PROPERTIES:
   :objective: If a robot's string starts with blue, accept. Otherwise reject!
   :time:     409:32
   :parts:    3
   :solution: ?lvl=2&code=p12:6f2;c12:7f3;c12:8f3;
   :image:    [[file:robocoffee.png]]
   :test:     '((b r) (r b))
   :END:

** DONE Robolamp!
   :PROPERTIES:
   :objective: ACCEPT: if there are three or more blues!
   :time:     1873:06
   :parts:    9
   :solution: ?lvl=3&code=c11:9f2;p12:9f2;p12:5f3;c13:5f0;c12:8f3;p11:5f4;c11:4f3;c11:6f3;c11:7f3;c11:8f3;
   :image:    [[file:robolamp.png]]
   :test:     '((r r r r r r r b b b) (r r r r r r r r b b))
   :END:

** DONE Robofish!
   :PROPERTIES:
   :objective: ACCEPT: if a robot contains NO red!
   :time:     546:04
   :parts:    4
   :solution: ?lvl=4&code=c11:6f2;p12:6f3;c12:7f3;c12:8f3;
   :image:    [[file:robofish.png]]
   :test:     '((b b b b b b b b b b) (b b b b b b b b r b))
   :END:

** DONE Robobugs!
   :PROPERTIES:
   :objective: ACCEPT: if the tape has only alternating colors!
   :time:     549:08
   :parts:    21
   :solution: ?lvl=5&code=c12:10f3;p12:4f3;c12:5f3;c12:6f3;c12:7f3;c12:8f3;c12:9f3;c10:4f3;c10:5f3;c10:6f3;c10:7f2;p11:4f0;p11:5f0;c11:7f2;p13:4f2;p13:5f2;c13:7f0;c14:4f3;c14:5f3;c14:6f3;c14:7f0;
   :image:    [[file:robobugs.png]]
   :test:     '((b r b r b r b r b r b r) (b r b r b r b r b b r r))
   :END:

** DONE Robocats!
   :PROPERTIES:
   :objective: ACCEPT: if the tape ends with two blues!
   :time:     5597:56
   :parts:    17
   :solution: ?lvl=6&code=c11:5f3;c12:4f3;p12:5f3;c13:6f1;c11:6f3;p11:7f3;c12:7f2;c13:7f1;c10:8f3;c13:8f1;c13:9f1;c10:7f3;c13:5f0;c10:9f2;p12:9f3;c11:9f2;c12:10f3;
   :image:    [[file:robocats.png]]
   :test:     '((b r b r r b r r b) (b r b r b r r b b))
   :END:

** DONE Robobears!
   :PROPERTIES:
   :objective: ACCEPT: Strings that begin and end with the same color!
   :time:     3140:22
   :parts:    23
   :solution: ?lvl=7&code=c12:4f3;p12:5f3;c12:6f3;c12:7f3;c12:8f3;c12:9f3;c12:10f3;c10:5f3;c10:6f3;c10:7f2;c11:3f3;p11:4f4;p11:5f4;c11:6f1;c11:7f2;c13:3f3;p13:4f6;p13:5f6;c13:6f1;c13:7f0;c14:5f3;c14:6f3;c14:7f0;
   :image:    [[file:robobears.png]]
   :test:     '((b r b r r r b r r r b r b) (b r b r r r b r r r b b r))
   :END:

   A string with length 1 is accepted.

** DONE RC Cars!
   :PROPERTIES:
   :objective: OUTPUT: The input, but with the first symbol at the end!
   :time:     819:04
   :parts:    7
   :solution: ?lvl=8&code=c12:8f3;c12:7f3;p12:6f3;c11:7f2;c13:7f0;b11:6f3;r13:6f3;
   :image:    [[file:rccars.png]]
   :test:     '(b r b r b b b r b)
   :END:

** DONE Robocars!
   :PROPERTIES:
   :objective: OUTPUT: Replace blue with green, and red with yellow!
   :time:     3822:54
   :parts:    7
   :solution: ?lvl=9&code=p12:6f3;c12:7f3;c12:8f3;c12:9f3;c12:5f3;g11:6f2;y13:6f0;
   :image:    [[file:robocars.png]]
   :test:     '(r b r b r r r b)
   :END:

** DONE Robostilts!
   :PROPERTIES:
   :objective: OUTPUT: Put a green at the beginning, and a yellow at the end!
   :time:     887:24
   :parts:    9
   :solution: ?lvl=10&code=p12:6f3;c12:5f3;y12:7f3;c12:8f3;c12:9f3;c12:10f3;b11:6f2;r13:6f0;g12:4f3;
   :image:    [[file:robostilts.png]]
   :test:     '(r r b r b r b b r)
   :END:
   
** DONE Milidogs!
   :PROPERTIES:
   :objective: ACCEPT: With blue as 1 and red as 0, accept odd binary strings!
   :time:     3549:48
   :parts:    9
   :solution: ?lvl=11&code=p12:6f3;c11:6f2;c12:7f3;c12:8f3;c12:9f3;c12:5f3;p13:6f6;c13:7f1;c13:5f0;
   :image:    [[file:milidogs.png]]
   :test:     '((b r r r r b r b) (b r r r r b b r))
   :END:
   
** DONE Soldiers!
   :PROPERTIES:
   :objective: OUTPUT: With blue as 1 and red as 0, multiply by 8.
   :time:     1092:00
   :parts:    7
   :solution: ?lvl=12&code=r12:4f3;r12:5f3;r12:6f3;c12:7f3;c12:8f3;c12:9f3;c12:10f3;
   :image:    [[file:soldiers.png]]
   :test:     '(r b r b b r b r)
   :END:

** TODO Officers!
   :PROPERTIES:
   :objective: OUTPUT: With blue as 1 and red as 0, add 1 to the binary string!
   :time:     -
   :parts:    -
   :solution: ?lvl=13&code=
   :image:    [[file:officers.png]]
   :test:     -
   :END:

   If last is red, return s[:-1] + blue
   Else convert blue to red from end to beginning until we find a red. If no red is found, add blue to the beginning.
** Unknown
   :PROPERTIES:
   :objective: -
   :time:     -
   :parts:    -
   :solution: ?lvl=14&code=
   :image:    [[file:x.png]]
   :test:     -
   :END:

** DONE Robotanks!
   :PROPERTIES:
   :objective: ACCEPT: With blue as 1 and red as 0, accept binary strings > 15!
   :time:     360:32
   :parts:    30
   :solution: ?lvl=15&code=p12:3f3;c13:3f0;p12:10f2;c12:9f2;c12:11f3;p11:3f0;c11:2f0;c9:5f3;c10:4f3;p10:5f3;c11:4f0;c11:5f3;c9:7f2;c9:8f3;c10:7f3;p10:8f3;c11:7f0;c9:6f3;c11:6f3;c9:9f3;c9:10f2;c10:10f2;c11:10f2;c11:8f3;c11:9f3;c10:2f3;i10:3f1;c13:9f3;i13:10f5;c13:11f0;
   :image:    [[file:robotanks.png]]
   :test:     '((r r r r r b b b b) (r r r r b b b b r))
   :END:

** DONE Robospies!
   :PROPERTIES:
   :objective: ACCEPT: With blue as 1 and red as 0, accept natural powers of four.
   :time:     823:12
   :parts:    13
   :solution: ?lvl=16&code=p12:4f3;c13:4f0;c12:8f3;c12:9f3;c12:10f3;c12:7f3;p11:4f0;p11:5f2;c10:4f3;c10:5f3;c10:6f3;c10:7f2;c11:7f2;
   :image:    [[file:robospies.png]]
   :test:     '((b r r r r r r r r) (b r r r r r b r r))
   :END:

   Natural powers of 4 are numbers 4^n with n a natural number.
   String must end in b or b followed by an even number of r

** DONE Androids!
   :PROPERTIES:
   :objective: ACCEPT: Some number of blue, then the same number of red!
   :time:     1511:07
   :parts:    44
   :solution: ?lvl=17&code=c8:5f1;c11:4f2;c13:7f3;c12:4f3;c13:4f0;c8:7f1;c8:8f1;c8:9f1;c8:10f1;b9:9f3;q9:10f4;r9:11f1;c10:10f0;c8:6f1;c12:7f2;c13:6f2;g11:5f2;p11:6f0;p12:6f3;c11:9f3;c8:4f2;c9:4f2;c10:4f2;c14:4f0;q15:4f4;b15:3f3;r15:5f1;c16:4f0;c16:5f1;p16:6f1;y16:7f1;p15:7f3;c13:11f0;c13:9f3;c15:6f3;c14:6f2;c12:5f3;y10:7f2;c11:7f3;p11:8f7;p10:8f4;c11:10f0;c13:10f3;q13:8f7;
   :image:    [[file:androids.png]]
   :test:     '((b b b b r r r r) (b b b b r r r))
   :END:
   Method: replace 2 blues with 1 green, discard pair "blue then red" in the transition, and replace the following 2 reds to 1 yellow.
   The solution has lots of redundancy to avoid cross sections.

   The following solution could work if it could start with red also.
   ?lvl=17&code=g10:5f2;p10:6f0;c10:7f2;c11:5f2;i11:6f0;c11:7f1;b11:8f0;c12:5f3;p12:6f3;c12:7f3;q12:8f7;c13:5f0;i13:6f3;c13:7f1;y14:5f0;p14:6f2;c14:7f0;c12:4f3;r13:8f3;i12:9f1;c12:10f3;c13:9f0;c11:9f0;c10:9f1;c10:8f0;c10:4f2;c11:4f2;c9:4f2;q9:8f4;r9:9f1;b9:7f3;c8:8f1;c8:7f1;c8:6f1;c8:5f1;c8:4f2;

** DONE Robo-children!
   :PROPERTIES:
   :objective: ACCEPT: An equal number of blue and red, in any order!
   :time:     10771:28
   :parts:    34
   :solution: ?lvl=18&code=g12:3f3;c9:3f2;c10:3f2;c11:3f2;c13:10f3;c13:11f3;c13:12f0;q8:3f5;c8:4f1;c8:5f1;c8:6f1;c8:7f1;b9:6f3;p9:7f0;r9:8f1;b10:4f3;p10:5f0;c10:6f3;c10:7f0;p11:4f3;p12:4f3;c12:5f3;q12:6f3;p13:4f3;c13:6f3;i13:7f1;r14:4f3;p14:5f2;c14:6f3;c13:9f3;c14:7f0;i12:7f6;c11:7f0;c13:8f3;
   :image:    [[file:robochildren.png]]
   :test:     '((r r b b b r b r) (b b r r b r r))
   :END:

** DONE Police!
   :PROPERTIES:
   :objective: OUTPUT: Put a yellow in the middle of the (even-length) string!
   :time:     6480:52
   :parts:    91
   :solution: ?lvl=19&code=g12:2f0;p11:2f0;b11:1f0;r11:3f0;y10:3f3;c10:1f3;i10:2f1;c8:3f0;c7:3f0;c6:3f3;c6:4f3;c6:5f3;c6:6f3;c6:7f3;c6:8f3;c6:9f3;c6:10f3;c6:11f3;c6:12f3;c6:13f2;c7:13f2;c8:13f2;c9:13f2;c10:13f2;c11:13f2;y9:3f0;c7:4f2;b7:5f1;c8:4f2;q8:5f0;y8:6f3;b8:7f2;b8:9f2;c9:4f3;p9:5f3;g9:7f3;c9:8f3;p9:9f3;q9:10f7;c10:4f0;q10:5f6;c10:8f0;r10:9f0;q10:10f2;c11:4f0;r11:5f1;c11:8f0;q9:2f0;y10:6f0;r9:6f3;p8:11f0;b8:10f3;r8:12f1;q7:11f0;c7:12f3;y10:11f0;c12:3f3;c12:4f3;c12:5f3;c12:6f3;c12:7f3;c12:8f0;c11:10f2;c12:10f2;r13:6f3;c13:7f2;g14:3f0;r14:4f2;y14:5f1;q14:6f0;c14:7f2;q15:3f1;p15:4f1;p15:6f1;c15:7f1;b16:4f0;y16:5f1;q16:6f6;c16:7f0;b17:6f3;c17:7f0;c13:3f0;c9:11f0;c13:8f2;r13:9f1;c13:10f2;c14:8f2;p14:9f1;c14:10f1;y15:8f1;b15:9f1;
   :image:    [[file:police.png]]
   :test:     '(r b b b r r b r)
   :END:

   I asume that all input strings are even.

   The solution has 7 major blocks:
   + add end flag and handle empty string
   + add first y after first b/r
   + add second yellow before last b/r
   + swap first yellow with next b/r
   + swap second yellow with previous b/r
   + handle case when yellows meet
   + read and rewrite till end flag, repeat swap step.

   Looking at the solution, some branch paths that should reject are connected. This is due to space restrictions and the fact that such situations should not arise.

** TODO Judiciary!
   :PROPERTIES:
   :objective: ACCEPT: (Even-length) strings that repeat midway through
   :time:     -
   :parts:    -
   :solution: ?lvl=20&code=
   :image:    [[file:judiciary.png]]
   :test:     -
   :END:

   Example of valid string: '(b r b r)

   This one starts where Police! ends.
   unfinished sol: ?lvl=20&code=g12:2f0;p11:2f0;b11:1f0;r11:3f0;y10:3f3;c10:1f3;i10:2f1;c8:3f0;c7:3f0;c6:3f3;c6:4f3;c6:5f3;c6:6f3;c6:7f3;c6:8f3;c6:9f3;c6:10f3;c6:11f3;c6:12f3;c6:13f2;c7:13f2;c8:13f2;c9:13f2;c10:13f2;c11:13f2;y9:3f0;c13:13f0;c7:4f2;b7:5f1;c8:4f2;q8:5f0;y8:6f3;b8:7f2;b8:9f2;c9:4f3;p9:5f3;g9:7f3;c9:8f3;p9:9f3;q9:10f7;c10:4f0;q10:5f6;y10:6f3;r10:7f0;c10:8f0;r10:9f0;q10:10f2;y10:11f2;c11:4f0;r11:5f1;c11:8f0;c11:9f2;c11:10f1;c11:11f2;r12:10f3;p12:11f2;b12:12f1;b13:10f2;q13:11f6;c13:12f3;c12:9f2;r13:8f2;p13:9f2;c14:8f3;y14:9f2;c14:10f1;q9:2f0;q16:8f1;p16:9f2;q16:10f7;r17:7f1;y17:8f1;y17:10f2;c18:6f0;c18:7f1;c18:8f1;c18:9f1;b18:10f1;c15:9f2;c15:10f1;c15:11f1;c15:7f3;c15:8f3;b16:11f0;r16:7f0;r14:7f1;b14:5f3;p14:6f0;q13:6f0;g13:7f0;c17:6f0;c16:6f0;c15:6f0;c11:7f3;c12:7f0;
** DONE Teachers!
   :PROPERTIES:
   :objective: ACCEPT: X blue, then X red, then X more blue, for any X!
   :time:     1313:38
   :parts:    27
   :solution: ?lvl=21&code=g12:2f3;c13:8f3;c13:9f3;c13:10f3;c13:11f3;c13:12f3;c13:13f0;c11:2f2;p12:4f3;c12:5f2;q13:5f6;c13:6f3;c13:7f3;p11:4f0;b11:3f3;c12:3f3;c11:5f3;p11:6f3;r12:6f0;c9:2f2;c9:3f1;c9:4f1;c9:5f1;q9:6f4;c10:2f2;b10:5f3;p10:6f0;
   :image:    [[file:teachers.png]]
   :test:     '((b b r r b b) (b b b r r r b b))
   :END:
   
** DONE Politians!
   :PROPERTIES:
   :objective: ACCEPT: If there are exactly twice as many blues as red!
   :time:     11655:47
   :parts:    42
   :solution: ?lvl=22&code=g12:2f3;c8:2f2;c9:2f2;i10:2f3;c11:2f2;c11:13f2;c7:2f2;c7:4f1;i9:4f1;c11:4f0;p12:4f3;c12:5f3;p13:4f2;c11:11f3;c11:12f3;c7:3f1;c12:3f3;r13:3f3;p10:4f0;p10:3f1;b11:3f0;c9:3f3;c7:5f1;c9:5f3;p10:5f3;r11:5f0;i10:6f6;c11:6f0;i12:6f6;p8:6f0;b8:5f3;c9:6f0;q7:6f4;q12:7f7;c11:7f3;c11:8f3;c11:9f3;c11:10f3;r8:7f1;p13:6f3;r14:6f0;c13:5f3;
   :image:    [[file:judiciary.png]]
   :test:     '((r b b r b r) (b b b r b r b))
   :END:

** TODO Academics!
   :PROPERTIES:
   :objective: Reverse the input string!
   :time:     -
   :parts:    -
   :solution: ?lvl=23&code=
   :image:    [[file:academics.png]]
   :test:     -
   :END:

** Unknown
   :PROPERTIES:
   :objective: -
   :time:     -
   :parts:    -
   :solution: ?lvl=24&code=
   :image:    [[file:x.png]]
   :test:     -
   :END:

** DONE Roborockets!
   :PROPERTIES:
   :objective: OUTPUT: Swap blue for red, and red for blue!
   :time:     6826:42
   :parts:    9
   :solution: ?lvl=25&code=c12:5f3;c12:9f3;p12:6f3;c12:7f3;q12:8f3;g11:6f2;y13:6f0;r13:8f0;b11:8f2;
   :image:    [[file:roborockets.png]]
   :test:     '(b b r b r r)
   :END:

** DONE Roboplanes!
   :PROPERTIES:
   :objective: OUTPUT: All of the blue, but none of the red!
   :time:     512:00
   :parts:    8
   :solution: ?lvl=26&code=p12:6f3;c12:5f3;q12:8f3;c12:7f3;c12:9f3;g11:6f2;c13:6f0;b13:8f0;
   :image:    [[file:roboplanes.png]]
   :test:     '(r r b r r b b b r)
   :END:

** DONE Rocket Planes!
   :PROPERTIES:
   :objective: OUTPUT: The input, but with all blues moved to the front!
   :time:     1607:32
   :parts:    27
   :solution: ?lvl=27&code=c11:11f2;c13:4f0;c14:4f0;g12:4f0;p11:4f0;b11:3f3;q9:4f0;c9:5f3;c10:4f0;c10:11f2;c10:10f3;r10:5f2;p11:5f7;r11:6f3;c10:9f3;c9:6f3;c10:8f3;b12:5f3;p12:6f6;r12:7f1;r13:6f2;c14:5f1;q14:6f2;q11:8f7;c11:7f3;c9:8f2;c9:7f3;
   :image:    [[file:rocketplanes.png]]
   :test:     '(r b r b r b r r b r)
   :END:

   The solution involves having a green end flag, and for each red we encounter, we send it to the end and start over again.

** DONE Robomecha!
   :PROPERTIES:
   :objective: OUTPUT: The input, but with the last symbol moved to the front!
   :time:     11332:18
   :parts:    25
   :solution: ?lvl=28&code=g12:3f3;c12:6f3;p12:5f3;c12:4f3;c10:4f2;i11:4f3;q13:5f6;r14:5f1;c14:4f0;i13:4f2;c12:7f3;q11:5f0;b10:5f1;c11:10f3;c11:11f2;c12:11f3;b11:8f2;p12:8f3;q12:9f7;r13:8f0;g11:6f3;b11:7f2;g13:6f3;r13:7f0;c11:9f3;
   :image:    [[file:robomecha.png]]
   :test:     '(r r r b b r b)
   :END:
